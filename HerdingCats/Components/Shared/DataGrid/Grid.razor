@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@using Radzen
@using Radzen.Blazor

@typeparam TItem where TItem : new()

<RadzenDataGrid @ref=_grid id=@_gridId TItem=@TItem Data=@Data CellDoubleClick=@OnCellDoubleClick
    SelectionMode=@DataGridSelectionMode.Single @bind-Value=@SelectedList>
    <Columns>
        @Columns
    </Columns>
</RadzenDataGrid>
@if (HasAddButton)
{
    <RadzenButton id=@_addButtonId Text=@($"New {ItemName}") Icon="add_circle" Click=OnAddButtonClick
        aria-label=@_addButtonAria />
}
<RadzenButton id=@_removeButtonId Text=@($"Remove selected {ItemName}") Icon="delete" Click=OnDeleteButtonClick
    Disabled=@(_selectedItem is null) aria-label=@_removeButtonAria />

@code {
    [Parameter]
    public RenderFragment Columns { get; set; } = builder => { };

    [Parameter]
    public string? ComponentId { get; set; }

    [Parameter]
    public ICollection<TItem> Data { get; set; } = [];

    [Parameter]
    public Func<TItem> ItemFactory { get; set; } = () => new();

    [Parameter]
    public string ItemName { get; set; } = typeof(TItem).Name;

    [Parameter]
    public bool IsEditable { get; set; } = true;

    [Parameter]
    public bool HasAddButton { get; set; } = true;

    public TItem? SelectedItem => _selectedItem;

    private IList<TItem> SelectedList
    {
        get => _selectedItem is null ? [] : [_selectedItem];
        set
        {
            TItem? nextSelection = value.FirstOrDefault();
            if (_selectedItem is not null && !_selectedItem.Equals(nextSelection))
            {
                _grid!.CancelEditRow(_selectedItem);
            }
            _selectedItem = nextSelection;
        }
    }

    private TItem? _selectedItem;
    private RadzenDataGrid<TItem>? _grid;

    private string? _gridId;
    private string? _addButtonId;
    private string? _addButtonAria;
    private string? _removeButtonId;
    private string? _removeButtonAria;

    public async Task RefreshDataAsync()
    {
        if (_grid is not null)
        {
            await _grid.RefreshDataAsync();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _gridId = (ComponentId ?? $"grid_{ItemName}").ToLower();
        _addButtonId = $"{_gridId}_btn_add";
        _addButtonAria = $"Add new {ItemName}";
        _removeButtonId = $"{_gridId}_btn_rm";
        _removeButtonAria = $"Remove selected {ItemName}";
    }

    private void OnCellDoubleClick(DataGridCellMouseEventArgs<TItem> args)
    {
        SelectedList = [args.Data];
        if (IsEditable)
        {
            _grid!.EditRow(args.Data);
        }
    }

    private async void OnAddButtonClick()
    {
        if (ItemFactory is not null)
        {
            TItem item = ItemFactory();
            Data.Add(item);
            SelectedList = [item];
            await _grid!.RefreshDataAsync();
            await _grid!.EditRow(item);
        }
    }

    private async void OnDeleteButtonClick()
    {
        if (_selectedItem is not null)
        {
            Data.Remove(_selectedItem);
            await _grid!.RefreshDataAsync();
            _selectedItem = default;
        }
    }
}